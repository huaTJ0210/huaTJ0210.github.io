<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>華</title>
  
  <subtitle>人无远虑必有近忧</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-09T01:36:46.583Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>华子</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue-loader+webpack项目工程配置笔记</title>
    <link href="http://yoursite.com/2018/11/25/vue-loader-webpack%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/11/25/vue-loader-webpack项目工程配置/</id>
    <published>2018-11-25T12:11:36.000Z</published>
    <updated>2019-01-09T01:36:46.583Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要包含以下内容： </p><ul><li>相关名词概念的介绍</li><li>vue-loader+webpack项目配置</li><li>webpack配置项目加载各种静态资源以及CSS</li><li>webpack-dev-server的配置和使用  </li></ul><p>在接触web开发的过程中经常会听到以下的名词： </p><ul><li><code>Node.js</code> </li><li><code>NPM</code> </li><li><code>Vue.js</code></li><li><code>webpack</code><br>那么这些名词是什么，做什么用的呢？带着这些问题，一一进行探究。<a id="more"></a> </li></ul><h3 id="名词概念简介"><a href="#名词概念简介" class="headerlink" title="名词概念简介"></a>名词概念简介</h3><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。  </p></blockquote><p><code>Node.js</code>使得JavaScript能够像PHP、Python等语言一样进行服务端开发。 </p><h4 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h4><blockquote><p>NPM的全称是Node Package Manager，是一个Node.js包管理和分发工具,有了NPM，可以很快的找到特定服务要使用的包，进行下载、安装以及管理已经安装的包  </p></blockquote><h5 id="npm的一些命令"><a href="#npm的一些命令" class="headerlink" title="npm的一些命令"></a>npm的一些命令</h5><ul><li><code>npm install &lt;packageName&gt;</code> :<code>npm install</code>首先会检查<code>node_modules</code>目录中是否存在要安装的模块，如果有就不在安装，及时远程仓库中存在新的版本，也不执行重新安装操作；</li><li><code>npm update &lt;packageName&gt;</code>:先到远程仓库查询，如果本地不存在或者远程仓库版本较新，则执行安装操作。</li><li><code>registry</code>：<code>npm</code>模块仓库提供了一个查询服务，叫做registry，执行<code>npm update react</code>实际是执行<code>https://registry.npmjs.org/react</code></li><li>模块的安装过程：发出<code>npm install</code>命令  –&gt;  <code>npm</code>向<code>registry</code>查询模块压缩包的网址 –&gt; 下载压缩包，存放在~/.npm目录下 –&gt; 解压压缩包到当前项目的node_modules目录</li></ul><h4 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h4><blockquote><p>Vue.js（读音 /vjuː/, 类似于 view）是一个构建数据驱动的 web 界面的渐进式框架。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p></blockquote><h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><blockquote><p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle  </p></blockquote><p>通过以上对以上名词的大致了解，那么就开始一步步构建一个简单的web项目  </p><h3 id="webpack打包web工程"><a href="#webpack打包web工程" class="headerlink" title="webpack打包web工程"></a>webpack打包web工程</h3><h4 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h4><p>创建一个<code>web-project</code>的文件夹，命令行切换到<code>web-project</code>下，执行<code>npm init</code>,根据提示填写；<code>web-project</code>下会多出一个package.json的文件包含项目基本信息：  </p><pre><code>{     &quot;name&quot;: &quot;webproject&quot;,     &quot;version&quot;: &quot;1.0.0&quot;,     &quot;description&quot;: &quot;test create web project&quot;,     &quot;main&quot;: &quot;index.js&quot;,     &quot;scripts&quot;: {       &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;     },     &quot;author&quot;: &quot;hua&quot;,     &quot;license&quot;: &quot;ISC&quot;   }   </code></pre><h4 id="安装项目需要的组件"><a href="#安装项目需要的组件" class="headerlink" title="安装项目需要的组件"></a>安装项目需要的组件</h4><ul><li><code>npm install vue vue-loader webpack</code></li><li><code>npm install css-loader</code></li></ul><h4 id="构建一个vue页面"><a href="#构建一个vue页面" class="headerlink" title="构建一个vue页面"></a>构建一个vue页面</h4><p>在<code>web-project</code>下创建<code>src</code>目录，然后再<code>src</code>目录下创建<code>App.vue</code>文件，代码如下 ：  </p><pre><code>&lt;template&gt;     &lt;div id=&quot;text&quot;&gt;{{text}}&lt;/div&gt;    &lt;/template&gt;    &lt;script&gt;        export default{            data(){                return{                    text:&apos;hello vue&apos;                }            }        }    &lt;/script&gt;    &lt;style&gt;    #text{        color: red    }    &lt;/style&gt;</code></pre><h4 id="创建项目的入口文件index-js"><a href="#创建项目的入口文件index-js" class="headerlink" title="创建项目的入口文件index.js"></a>创建项目的入口文件index.js</h4><p>在<code>web-project/src</code>下创建<code>index.js</code>文件，内容如下：  </p><pre><code>import Vue from &apos;vue&apos;import App from &apos;./app.vue&apos;const root = document.createElement(&apos;div&apos;)document.body.appendChild(root)new Vue({    render:(h) =&gt; h(App)}).$mount(root)</code></pre><h4 id="创建webpack的配置文件"><a href="#创建webpack的配置文件" class="headerlink" title="创建webpack的配置文件"></a>创建webpack的配置文件</h4><p>在<code>web-project</code>下创建<code>webpack.config.js</code>文件，内容如下：  </p><pre><code>  const path = require(&apos;path&apos;)const VueLoaderPlugin = require(&apos;vue-loader/lib/plugin&apos;);const config = {    // 设置入口    entry:path.join(__dirname,&apos;src/index.js&apos;),    output:{        filename:&apos;bundle.js&apos;,//打包后js的名称        path:path.join(__dirname,&apos;dist&apos;)// 打包后文件存放的目录    },    plugins:[        new VueLoaderPlugin(),    ],    mode:&apos;development&apos;,    module:{        rules:[            {                test:/\.vue$/,//包含vue的文件使用vue-loader处理                loader:&apos;vue-loader&apos;            },            {                test:/\.css$/,                loader:&apos;css-loader&apos;            }        ]    }}module.exports = config</code></pre><h4 id="在package-json中添加配置"><a href="#在package-json中添加配置" class="headerlink" title="在package.json中添加配置"></a>在package.json中添加配置</h4><p>在<code>scripts</code>结点下添加<code>&quot;build&quot;: &quot;webpack --config webpack.config.js&quot;</code>  </p><h4 id="使用webpack打包工程"><a href="#使用webpack打包工程" class="headerlink" title="使用webpack打包工程"></a>使用webpack打包工程</h4><p>执行<code>npm run build</code>，在项目<code>web-project</code>目录下产生一个<code>dist</code>的文件夹，并且目录下有个<code>bundle.js</code>的文件，至此项目打包已经结束</p><h3 id="webpack-dev-server的使用"><a href="#webpack-dev-server的使用" class="headerlink" title="webpack-dev-server的使用"></a>webpack-dev-server的使用</h3><p>在日常的工作中webpack-dev-server能够使得我们的开发调试更简洁方便，下面让我们来一步步通过配置来使用webpack-dev-server； </p><h4 id="webpack-dev-server安装"><a href="#webpack-dev-server安装" class="headerlink" title="webpack-dev-server安装"></a>webpack-dev-server安装</h4><p>执行<code>npm install webpack-dev-server</code> 我们在打包的使用希望有个html文件承载我们的bundle.js，所以要安装一个html-webpack-plugin，执行<code>npm install html-webpack-plugin</code>   </p><p>在不同的操作系统中，我们希望执行的命令是统一的所以要安装cross-env，执行 <code>npm install cross-env</code> </p><h4 id="修改package-json中的配置"><a href="#修改package-json中的配置" class="headerlink" title="修改package.json中的配置"></a>修改package.json中的配置</h4><p> 在package.json文件中的scripts节点下，修改build节点为<code>cross-env NODE_ENV=production webpack --config webpack.config.js</code>，代表生产环境的命令脚本，新增dev节点，内容为<code>cross-env NODE_ENV=development webpack-dev-server --config webpack.config.js</code>，为开发环境执行脚本。</p><h4 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><pre><code>const path = require(&apos;path&apos;)const VueLoaderPlugin = require(&apos;vue-loader/lib/plugin&apos;);const isDev = process.env.NODE_ENV === &apos;development&apos;const HTMLPlugin = require(&apos;html-webpack-plugin&apos;)const webpack = require(&apos;webpack&apos;)const config = {    target:&apos;web&apos;,    // 设置入口    entry:path.join(__dirname,&apos;src/index.js&apos;),    output:{        filename:&apos;bundle.js&apos;,//打包后js的名称        path:path.join(__dirname,&apos;dist&apos;)// 打包后文件存放的目录    },    plugins:[        new VueLoaderPlugin(),        new webpack.DefinePlugin({            &apos;process.env&apos;:{                NODE_ENV:isDev ? &apos;&quot;development&quot;&apos;:&apos;&quot;production&quot;&apos;            }        }),        new HTMLPlugin()    ],    mode:&apos;development&apos;,    module:{        rules:[            {                test:/\.vue$/,//包含vue的文件使用vue-loader处理                loader:&apos;vue-loader&apos;            },            {                test:/\.css$/,                loader:&apos;css-loader&apos;            }        ]    }}if(isDev){   config.devServer={       port:8008,       host:&apos;0.0.0.0&apos;,       overlay:{           errors:true       },       hot:true   }   config.plugins.push(       new webpack.HotModuleReplacementPlugin(),       new webpack.NoEmitOnErrorsPlugin()   )}module.exports = config</code></pre><h3 id="页面显示"><a href="#页面显示" class="headerlink" title="页面显示"></a>页面显示</h3><p>此时在浏览器中输入<code>http://0.0.0.0:8008/</code>即可访问项目页面。  </p><blockquote><p>内容参照  </p></blockquote><p><a href="http://www.ruanyifeng.com/blog/2016/01/npm-install.html" target="_blank" rel="external">阮一峰-npm 模块安装机制简介</a><br><a href="https://www.imooc.com/learn/935" target="_blank" rel="external">慕课网-Vue+Webpack打造todo应用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要包含以下内容： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相关名词概念的介绍&lt;/li&gt;
&lt;li&gt;vue-loader+webpack项目配置&lt;/li&gt;
&lt;li&gt;webpack配置项目加载各种静态资源以及CSS&lt;/li&gt;
&lt;li&gt;webpack-dev-server的配置和使用  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在接触web开发的过程中经常会听到以下的名词： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Node.js&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;NPM&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Vue.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webpack&lt;/code&gt;&lt;br&gt;那么这些名词是什么，做什么用的呢？带着这些问题，一一进行探究。
    
    </summary>
    
      <category term="Vue.js" scheme="http://yoursite.com/categories/Vue-js/"/>
    
    
      <category term="Vue.js" scheme="http://yoursite.com/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-《软技能》事业篇</title>
    <link href="http://yoursite.com/2018/08/18/%E8%AF%BB%E3%80%8A%E8%BD%AF%E6%8A%80%E8%83%BD%E3%80%8B/"/>
    <id>http://yoursite.com/2018/08/18/读《软技能》/</id>
    <published>2018-08-18T09:37:48.000Z</published>
    <updated>2018-08-18T12:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>  《软技能》一书旨在让开发人员如何成为一名优秀的工程师，它涉及的主要七个方面：  </p><ul><li>事业</li><li>自我营销</li><li>学习</li><li>生产力</li><li>理财</li><li>身体</li><li>精神</li></ul><a id="more"></a>  <h2 id="事业"><a href="#事业" class="headerlink" title="事业"></a>事业</h2><p>   《软技能》中提出<strong>你所犯的最大的错误就是相信自己是在为别人工作。这样一来你对工作的安全感已燃尽。职业的驱动力一定是来自个体本身。</strong>      </p><p>文章中指出多数软件开发者所犯的最大的错误在于没有把软件开发当成一桩生意来看。职业规划应该像管理企业一样制定最优的决策和保证生产力的持续提升。所以应该把你现在的公司当做你的一个客户，然后像企业一样去思考，时刻去想作为一个企业我能提供什么，这样你的工作方式、处理自己财务的方式、需求新工作的方式都会得到改变。</p><h3 id="你的目标是什么"><a href="#你的目标是什么" class="headerlink" title="你的目标是什么"></a>你的目标是什么</h3><p>软件开发工程师要确定自己的目标，初级、中级、高级、资深等，还是走管理路线，你要确定自己的目标；<br>设立目标，这个很关键，为职业生涯设立一个大目标然后去拆分，月目标、周目标，时刻让自己知道在追求什么</p><h3 id="人际交往能力"><a href="#人际交往能力" class="headerlink" title="人际交往能力"></a>人际交往能力</h3><p>软件开发者整体给人的印象就是呆板不容易沟通，<strong>别管我，我只想一个人安静的写代码</strong>这句话同行们都应该说过。实际上软件开发就是与他人打交道的过程，假象你研发的东西没人使用，那他的意义在于什么呢？我们在工作中会与产品、测试、业务、运营等人员沟通，所以沟通是极其重要的。那么如何与人打交道，以下几点很受用：  </p><ul><li>每个人都希望感到自己很重要</li><li>永远不要批评</li><li>换位思考</li><li>避免争吵</li></ul><h3 id="破解面试之道"><a href="#破解面试之道" class="headerlink" title="破解面试之道"></a>破解面试之道</h3><ul><li>个人博客和github对于研发人员很重要，当面试官看过你的博客，那么面试成功率就会很大；   </li><li>突破常规从期待加入公司的员工入手，建立联系，简历走内部推荐模式；</li><li>确保自己仍旧保持技术能力，如果你力所不及，那么所有的面试技巧都不会帮助到你；</li><li>即使不换新工作也要出去面试，获取面试的经验，这样你真正面试的时候就会游刃有余；  </li></ul><h3 id="就业选择"><a href="#就业选择" class="headerlink" title="就业选择"></a>就业选择</h3><p>一个软件开发工程师可以从事哪些工作:   </p><ul><li>雇员 </li><li>独立咨询师</li><li>创业者</li></ul><h3 id="你是哪类开发人员"><a href="#你是哪类开发人员" class="headerlink" title="你是哪类开发人员"></a>你是哪类开发人员</h3><p>我们在选择律师的时候会根据具体的案件去选择，软件开发工程师也是你需要在自己的专业领域做的卓越，开发人员的专业领域包含：   </p><ul><li>Web开发栈</li><li>嵌入式系统</li><li>特定操作系统</li><li>移动开发</li><li>框架</li><li>软件系统</li></ul><h3 id="公司与公司是不一样"><a href="#公司与公司是不一样" class="headerlink" title="公司与公司是不一样"></a>公司与公司是不一样</h3><p>你选择的任职公司会影响你的整体幸福感、存在感和归属感；比较一下不同种类公司的优缺点</p><table><thead><tr><th>公司规模</th><th>优点</th><th>缺点  </th></tr></thead><tbody><tr><td>小公司</td><td>承担多种职责，灵活的角色转换，汇报潜力大</td><td>没法安静的写代码，稳定性差</td></tr><tr><td>中等公司</td><td>工作稳定，加班少</td><td>变化很慢，没有机会使用新技术</td></tr><tr><td>大公司</td><td>完备的流程化，培训机会多，大型有影响力的作用</td><td>充斥官僚作风，可能只负责代码库的一小部分</td></tr></tbody></table><p>在选择公司的时候要权衡利弊，多花时间思考自己喜欢在什么样的环境下工作，多大的规模符合你自己理想的工作环境   </p><h3 id="攀登晋升阶梯"><a href="#攀登晋升阶梯" class="headerlink" title="攀登晋升阶梯"></a>攀登晋升阶梯</h3><ul><li>承担更多的责任</li><li>引人注目  <ul><li>提供演讲和培训</li><li>发表意见</li><li>保证“曝光度”</li></ul></li><li>自学 <ul><li>参加培训</li><li>考取证书</li><li>继续深造 </li></ul></li><li>成为问题的解决者<ul><li>如果你能解决别人不能解决的问题，你就能轻而易举成为最有价值的人</li></ul></li><li>关于政治  <ul><li>保持警惕之心</li><li>脚踏实地</li></ul></li></ul><p>在晋升之路上，自学占有很大比重的，要确定自学的最有价值的东西是什么，然后指定计划去执行；  </p><h3 id="成为专业人士"><a href="#成为专业人士" class="headerlink" title="成为专业人士"></a>成为专业人士</h3><blockquote><p>专业人士严肃对待自己的责任和事业，愿意做出艰难的选择去做自己认为正确的事情–往往还要自己承担代价  </p></blockquote><p>如何成为专业人士：首先你要养成良好的习惯；你是否有自己的时间管理计划呢？第二天的工作内容是什么，你是如何安排的等等。追求品质，完善自我；工作的完成分为很多等级，开发人员应该极力追求质量的控制；想象一下你提交的版本有问题会引发多少连锁的反应，测试工程师，运维工程师等等都会受到牵连，所以交付质量非常重要；<br>成为专业人员是一个持续性的过程，要有很好的耐性。 </p><h3 id="假装自己能成功"><a href="#假装自己能成功" class="headerlink" title="假装自己能成功"></a>假装自己能成功</h3><p>假装自己能成功是一个自我暗示，能让自己增强自信心；我们都会面对困境–接到的任务自己一无所知，会感到不自在，无能为力。消除这种情绪就要“假装自己能成功”；<br>这个技巧同时适用于面试阶段，碰到不会的问题，可以表现自己有信心解决。但一定不能表现为自大。</p><h3 id="请勿陷入技术狂热"><a href="#请勿陷入技术狂热" class="headerlink" title="请勿陷入技术狂热"></a>请勿陷入技术狂热</h3><p>天生一物必有用，php是最好的语言可以当成个调侃，但不要去比对不同语言的孰好孰坏，一定要争论个第一出来，其实完全没有意义。我们应该对技术保持开放的心态，而不是固守自己已经了解的技术。突破于此你就会发现更多的机会向你涌来。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  《软技能》一书旨在让开发人员如何成为一名优秀的工程师，它涉及的主要七个方面：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事业&lt;/li&gt;
&lt;li&gt;自我营销&lt;/li&gt;
&lt;li&gt;学习&lt;/li&gt;
&lt;li&gt;生产力&lt;/li&gt;
&lt;li&gt;理财&lt;/li&gt;
&lt;li&gt;身体&lt;/li&gt;
&lt;li&gt;精神&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="随感" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>生活篇--说说三观</title>
    <link href="http://yoursite.com/2017/06/04/%E7%94%9F%E6%B4%BB%E7%AF%87--%E8%AF%B4%E8%AF%B4%E4%B8%89%E8%A7%82/"/>
    <id>http://yoursite.com/2017/06/04/生活篇--说说三观/</id>
    <published>2017-06-04T09:37:48.000Z</published>
    <updated>2018-06-23T04:14:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="人生观"><a href="#人生观" class="headerlink" title="人生观"></a>人生观</h3><blockquote><p>对于人生的根本态度与看法  </p></blockquote><p>   人生千姿百态，每个人都是一个演员在无剧本的人生舞台上做着自己的表演。有句话说<strong>意识决定形态</strong>，我个人浅显的理解就是你自己的意愿想通过哪种姿态展现自己， 那么在世人面前你就是以哪种姿态呈现。<br>有时候我们会感慨某某活成了我们自己想要的模样，其实本质上我们都有活成某种模样的意识但最终为什么差别很大？主要原因是缺乏行动，多数人都具有正确的人生观：积极生活、努力奋斗、追求幸福等；但又有多少勤勤恳恳的去实践自己的人生观呢？经常会听到说这人的做事态度不错，但请不要忘记最终衡量你的还是做事的结果。获取正确的人生观容易，困难的是通过正确的人生观来让生活极大丰富才是最困难的事情！<br><a id="more"></a></p><h4 id="人生观主要包含哪些"><a href="#人生观主要包含哪些" class="headerlink" title="人生观主要包含哪些"></a>人生观主要包含哪些</h4><ul><li>友谊观</li><li>恋爱观</li><li>审美观</li><li>道德观</li><li>苦乐观</li><li>幸福观</li></ul><h3 id="世界观"><a href="#世界观" class="headerlink" title="世界观"></a>世界观</h3><blockquote><p>它是人们对世界的基本看法和观点.世界观具有实践性，人的世界观是不断更新、不断完善、不断优化的；  </p></blockquote><p>世界观确实是在不断的更新中的，<strong>世界那么大，我想去看看</strong>本质上的追求是去丰富自己的世界观的，而不是仅仅看看风景，发发朋友圈而已。去一个地方应该在欣赏美景的同时去了解风土人情，通过比较差异来完善自己的认知，使得自己更为的丰富。</p><h3 id="价值观"><a href="#价值观" class="headerlink" title="价值观"></a>价值观</h3><blockquote><p> 用以区分好与坏的标准，是根据个人内心的尺度进行衡量和评价的，这些标准都可以称为价值观。  </p></blockquote><p>我们日常会听到<strong>某某的价值观出了问题</strong>，其实呢我们是在说某人对于问题的评判或者是做的某些行为严重的偏离了我们正常的认知；那么具体什么是正确的价值观呢？这个问题需要我们自己不断的去探寻、去学习。有些价值观是父母师长等人群灌输的；例如孝敬长者，尊师重道等基本的道德要求；真善美与假恶丑是需要自己去分辨的。特别是目前我们处于互联网时代，言论自由，你对于每一个事件的看法都是你价值观的体现；平时和朋友相处也是，交谈中你的价值观就被反应出来了，价值观一致的人才适合一起玩耍的！</p><h3 id="婚姻观"><a href="#婚姻观" class="headerlink" title="婚姻观"></a>婚姻观</h3><blockquote><p>对婚姻和家庭的看法和态度。</p></blockquote><p>我个人一直遵守家庭第一，其他第二的原则；把家庭照顾好了的前提下再向<em>大家</em>奉献，我觉得才是理想的状态。因为每个人的人生观不同所以也就没有评判对与错的必要；</p><h4 id="幸福婚姻应该包含哪些要素"><a href="#幸福婚姻应该包含哪些要素" class="headerlink" title="幸福婚姻应该包含哪些要素"></a>幸福婚姻应该包含哪些要素</h4><ul><li>童心</li><li>浪漫</li><li>幽默</li><li>亲昵</li><li>情话</li><li>沟通</li><li>欣赏</li></ul><p>日常我们经常听到<strong>三观尽毁</strong>和<strong>三观正才能一起玩耍</strong>；一直以来都没有好好的思考自己的<strong>三观</strong>到底是什么？其实我的日常生活中存在很多这样的习以为常的问题都被自己忽略了，真的很不应该，问题是应该被解决的，时间不会将它带走！追求简单生活，不要要逃避问题，而是要解决复杂的问题，这样生活才会简单！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;人生观&quot;&gt;&lt;a href=&quot;#人生观&quot; class=&quot;headerlink&quot; title=&quot;人生观&quot;&gt;&lt;/a&gt;人生观&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;对于人生的根本态度与看法  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   人生千姿百态，每个人都是一个演员在无剧本的人生舞台上做着自己的表演。有句话说&lt;strong&gt;意识决定形态&lt;/strong&gt;，我个人浅显的理解就是你自己的意愿想通过哪种姿态展现自己， 那么在世人面前你就是以哪种姿态呈现。&lt;br&gt;有时候我们会感慨某某活成了我们自己想要的模样，其实本质上我们都有活成某种模样的意识但最终为什么差别很大？主要原因是缺乏行动，多数人都具有正确的人生观：积极生活、努力奋斗、追求幸福等；但又有多少勤勤恳恳的去实践自己的人生观呢？经常会听到说这人的做事态度不错，但请不要忘记最终衡量你的还是做事的结果。获取正确的人生观容易，困难的是通过正确的人生观来让生活极大丰富才是最困难的事情！&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="随感" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
</feed>
